Revised Technique Statement

First, we use (random-seed n) to make sure that the procedure “random” we use in our “image-series” generate random numbers with respect to the n we put in, so that if we put in the same n, we get the randomized numbers generated using “random” within the procedure in the same sequence.

Second, instead of creating a new square blank image like we said before, we define a square image with size of 800*800 we wish to draw on as “canvas”. Canvas is an image on which we used image-compute to create a gradient effect with (irgb 255 255 255) in the center and an irgb-color with randomly generated red/green/blue components on the border. We made this change because we realized image-compute create its own image after revising the code for image-compute. Canvas is now a 800*800 image with gradient colors, with white in the center and darker colors towards the edge, regardless of the width and height we put into the image-series. We will create another new image with the input width and height, and name it “target”.

After that, we will set the foreground color to black and the brush to "2. Hardness 100" with size 5. First, we draw one circle with radius 200 centered at (400,400) using GIMP tool image-select-ellipse! and image-stroke-selection!. Then, since we found that the original “image-select-ellipse” procedure’s first two parameters “left” and “top” is biased in the top-left corner, we wrote our own “draw-circle” procedure with the center and radius as parameters. We use “repeat” and “draw-circle” to draw 30 other circles centered at 99% to 101% away from the original center and distorted horizontally and vertically about 96% to 104%, percentage determined randomly. The overlap of 31 ellipses will create a feeling of brushstrokes. We changed the number of distorted circles drawn because it is convenient using “repeat” to do so and it represents the original heptapod language better.

Then, we let a procedure called “pick-spot!”, which draws a grey circle that covers exactly one tenth of the circumference of the base circle. We have already calculated 10 positions for the center of a smaller circle on the circumference of the base circle with trigonometric computation. So we let another procedure called “draw-circle!” that pick from one of the positions with a random number between 0 and 9, then calls “pick-spot!” to place the grey circle on that spot. 

To achieve a splash-like blot resembling Heptapod B language, we first let a “pick-turtle!” procedure that make a list of turtles, whose number ranging from 5 to 14. Each turtle from the list is asked to turn a random angle between 0 and 359 degrees and then crawl forward a bit. After every turn, the next crawl would be shorter with a thinner stroke. Then, we define “turtle-crawl” to pick one of the 10 positions on the circumference and call “pick-turtle!” to let the turtles crawl a blot. This time, the ten positions are different from the ones in the previous “draw-circle!” procedure, so that the blot won’t appear in the middle of the grey circle.

Finally, we use code from previous reading “collage” to enable us to scale the image. We will copy the entire image, scale it and paste it onto “target”, then return “target” in the end.

In the revised method, we did not use the hundreds/tens/units digits derived from n. Instead we used the random procedure because it creates more interesting images and is less predictable (which also means more interesting). This new code also enables us to input number “n” larger than 999. 
